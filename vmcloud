#!/usr/bin/env ruby

require 'net/http'
require 'uri'
require 'openssl'
require 'getoptlong'
require 'nokogiri'
#Here we are ignoring any issues that may arise with SSL certificates

OpenSSL::SSL::VERIFY_PEER = OpenSSL::SSL::VERIFY_NONE

def usage
  puts "\nUsage: vmcloud\n\n"
  puts "\t-m , --machinename\t <machinename>\tThe name of the machine to retrieve the metadata for\n"
  puts "\t-h , --help\t \tShow this help screen.\n"
  puts "\n"
  puts "Defaults\n\n"
  puts "\t./vmcloud -m machine1 \t\t get the metadata for a machine named \"machine1\"\n"


  exit
end



getoptlong = GetoptLong.new(
    ['--help','-h',   GetoptLong::NO_ARGUMENT],
    ['--verbose',     GetoptLong::NO_ARGUMENT],
    ['--machinename','-m', GetoptLong::REQUIRED_ARGUMENT]
)

getoptlong.each do |opt,arg|
  case opt
    when '--help'
      usage
    when '--machinename'
      @machinename=arg
    when '--verbose'
      @verbose=true
  end
end
end

def find_machine_node response,  machine_name

   Nokogiri::XML(response.body).root.xpath("//vcloud:AdminVAppRecord", {'vcloud' => "http://www.vmware.com/vcloud/v1.5"}).each do |node|
     node['name'] == machine_name ? get_metadata_for_machine(node['href']) : next
   end

end

def get_metadata_for_machine ref

  #Parse URL into URI object - deconstruct from the reference passed in from the call
  request = Net::HTTP::Get.new("#{ref.slice((ref.index("api")-1),ref.size)}/metadata", @headers)
  #send the new request and grab the response again
  response = @http.request(request)
  @doc = Nokogiri::XML(response.body)
  rooter = @doc.root
  allter= rooter.xpath("//vcloud:Value", {'vcloud' => "http://www.vmware.com/vcloud/v1.5"})
  #puts allter
  allter.each do |kk|
    puts kk.content
  end
end

#main fetch function takes an initial URL to fetch from and a limit for number of redirects to follow
def fetch(uri_str, machine, limit = 10)
  raise ArgumentError, 'HTTP redirect too deep' if limit == 0

  #Parse URL into URI object
  uri = URI.parse(uri_str)
  #Create new Net::HTTP object
  @http = Net::HTTP.new(uri.host, uri.port)
  #Set the http object to use SSL
  @http.use_ssl = true
  #Ignore issues with SSL certs
  @http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  #Start the http session
  @http.start()
  #Create an HTTP POST request to /api/sessions to authenticate
  req = Net::HTTP::Post.new('/api/sessions')
  #Set HTTP basic auth variables of username and password
  req.basic_auth 'vcdadmin@System', 'P@ssw0rd1'
  req.add_field 'Accept', 'application/*+xml;version=1.5'
  req.add_field 'Content-type', 'application/*+xml;version=1.5'
  #Send the request we created earlier, and capture the HTTP response
  response = @http.request(req)
  #Start case to handle various HTTP responses
  case response
    #If authentication is successful, a token is returned in the response header. So if we get an HTTP 200 response from the vCloud server, then we can grab the "x-vcloud-authorization" token from the header
    when Net::HTTPSuccess     then
      authKey = response.header['x-vcloud-authorization']
    #if we get an HTTPfound instead, we are probably getting redirected and should try to follow it. You may need to tweak this section to suit your use case
    when Net::HTTPFound        then
      #call the main fetch function again and decrement the overall redirect limit
      fetch(response['location'], limit - 1)
    #If we get an HTTP redirection, we are definitely getting redirected and should follow it
    when Net::HTTPRedirection then fetch(response['location'], limit - 1)
    else
      #something went wrong - spit out whatever the response error is
      puts response.error!
  end

  #Set the headers as a variable to be re-used later, including the authorization token we grabbed earlier
  @headers = {
      'Accept' => 'application/*+xml;version=1.5',
      'x-vcloud-authorization' => "#{authKey}"
  }

  #Build a new request, this time an HTTP GET, to grab a value from the API. Supply both the API call and the headers variable we just put together
  req = Net::HTTP::Get.new('/api/query?type=adminVApp', @headers)

  #send the new request and grab the response again
  response = @http.request(req)
  find_machine_node response, machine

  #Finally, build one more request to send an HTTP DELETE call to /api/sessions to kill your session
  req = Net::HTTP::Delete.new('/api/sessions', @headers)
  @http.request(req)

end

main
fetch('https://10.163.4.32:443', @machinename)